@model List<Applications.DTos.ItemDTOs.ItemsDto>

@{
    ViewData["Title"] = "Menu Items";
    Layout = "~/Areas/Admin/Views/Shared/_Admin.cshtml";
}

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">

            <!-- Alert Messages -->
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="fas fa-check-circle"></i> @TempData["SuccessMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }

            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-circle"></i> @TempData["ErrorMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }

            @if (TempData["Message"] != null)
            {
                <div class="alert alert-info alert-dismissible fade show" role="alert">
                    <i class="fas fa-info-circle"></i> @TempData["Message"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }

            <!-- Header Card -->
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex justify-content-between align-items-center bg-primary text-white">
                    <h3 class="m-0 font-weight-bold">
                        <i class="fas fa-utensils"></i> Menu Items Management
                    </h3>
                    <a asp-action="Create" class="btn btn-success">
                        <i class="fas fa-plus"></i> Add New Item
                    </a>
                </div>

                <div class="card-body">
                    <!-- Search Form -->
                    <form asp-action="Search" method="get" class="mb-4">
                        <div class="row">
                            <div class="col-md-8">
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-search"></i></span>
                                    <input type="text" name="name" class="form-control" placeholder="Search by item name..." />
                                    <button type="submit" class="btn btn-primary">Search</button>
                                    <a asp-action="GetAll" class="btn btn-secondary">
                                        <i class="fas fa-redo"></i> Reset
                                    </a>
                                </div>
                            </div>
                        </div>
                    </form>

                    @if (Model == null || !Model.Any())
                    {
                        <div class="alert alert-info text-center">
                            <i class="fas fa-info-circle fa-2x mb-2"></i>
                            <p class="mb-0">No items found. Click "Add New Item" to create one.</p>
                        </div>
                    }
                    else
                    {
                        <!-- Items Table -->
                        <div class="table-responsive">
                            <table class="table table-bordered table-hover align-middle">
                                <thead class="table-dark">
                                    <tr>
                                        <th width="100">Image</th>
                                        <th>Name</th>
                                        <th>Description</th>
                                        <th>Price</th>
                                        <th>Category</th>
                                        <th>Quantity</th>
                                        <th>Prep Time</th>
                                        <th width="180">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model)
                                    {
                                        <tr>
                                            <td class="text-center">
                                                @if (!string.IsNullOrEmpty(item.ImageUrl))
                                                {
                                                    <img src="@item.ImageUrl" alt="@item.Name"
                                                         class="img-thumbnail"
                                                         style="width: 80px; height: 80px; object-fit: cover;" />
                                                }
                                                else
                                                {
                                                    <div class="bg-secondary text-white d-flex align-items-center justify-content-center"
                                                         style="width: 80px; height: 80px;">
                                                        <i class="fas fa-image fa-2x"></i>
                                                    </div>
                                                }
                                            </td>
                                            <td><strong>@item.Name</strong></td>
                                            <td>@(item.Description ?? "N/A")</td>
                                            <td><strong>@item.Price.ToString("C")</strong></td>
                                            <td>
                                                <span class="badge bg-info text-dark">
                                                    @(item.Category?.Name ?? "N/A")
                                                </span>
                                            </td>
                                            <td class="text-center">
                                                @if (item.Quantity > 10)
                                                {
                                                    <span class="badge bg-success">@item.Quantity</span>
                                                }
                                                else if (item.Quantity > 0)
                                                {
                                                    <span class="badge bg-warning text-dark">@item.Quantity</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-danger">Out of Stock</span>
                                                }
                                            </td>
                                            <td class="text-center">
                                                <span class="badge bg-secondary">@item.PreparationTime min</span>
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <a asp-action="Details" asp-route-id="@item.Id"
                                                       class="btn btn-info btn-sm" title="Details">
                                                        <i class="fas fa-eye"></i>
                                                    </a>
                                                    <a asp-action="Edit" asp-route-id="@item.Id"
                                                       class="btn btn-warning btn-sm" title="Edit">
                                                        <i class="fas fa-edit"></i>
                                                    </a>
                                                    <button type="button" class="btn btn-danger btn-sm"
                                                            onclick="confirmDelete(@item.Id, '@Html.Raw(item.Name.Replace("'", "\\'"))')"
                                                            title="Delete">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Items Count -->
                        <div class="mt-3">
                            <p class="text-muted">
                                <i class="fas fa-list"></i> Total Items: <strong>@Model.Count</strong>
                            </p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Hidden Anti-Forgery Token -->
@Html.AntiForgeryToken()

@section Scripts {
    <!-- SweetAlert2 -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        // Auto-hide alerts after 5 seconds
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(function() {
                var alerts = document.querySelectorAll('.alert');
                alerts.forEach(function(alert) {
                    var bsAlert = new bootstrap.Alert(alert);
                    bsAlert.close();
                });
            }, 5000);
        });

        // Delete confirmation with order check
        async function confirmDelete(itemId, itemName) {
            try {
                // Check if item has orders
                const response = await fetch(`/Admin/MenuItem/CheckItemOrders?id=${itemId}`);
                const data = await response.json();

                if (data.hasOrders) {
                    // Item exists in orders - show error
                    Swal.fire({
                        icon: 'error',
                        title: 'Cannot Delete!',
                        html: `
                            <div class="text-start">
                                <p>The item <strong>${itemName}</strong> cannot be deleted because it exists in one or more orders.</p>
                                <hr>
                                <p class="text-muted mb-0">
                                    <i class="fas fa-info-circle"></i>
                                    <small>To delete this item, you must first remove it from all orders.</small>
                                </p>
                            </div>
                        `,
                        confirmButtonText: 'OK',
                        confirmButtonColor: '#dc3545',
                        width: '500px'
                    });
                } else {
                    // Item doesn't have orders - confirm delete
                    const result = await Swal.fire({
                        title: 'Are you sure?',
                        html: `
                            Do you want to delete <strong>${itemName}</strong>?
                            <br>
                            <small class="text-danger">
                                <i class="fas fa-exclamation-triangle"></i>
                                This action cannot be undone!
                            </small>
                        `,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#dc3545',
                        cancelButtonColor: '#6c757d',
                        confirmButtonText: '<i class="fas fa-trash"></i> Yes, delete it!',
                        cancelButtonText: '<i class="fas fa-times"></i> Cancel',
                        reverseButtons: true
                    });

                    if (result.isConfirmed) {
                        // Create and submit form
                        const form = document.createElement('form');
                        form.method = 'POST';
                        form.action = `/Admin/MenuItem/DeleteDirect`;

                        const input = document.createElement('input');
                        input.type = 'hidden';
                        input.name = 'id';
                        input.value = itemId;
                        form.appendChild(input);

                        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                        const tokenInput = document.createElement('input');
                        tokenInput.type = 'hidden';
                        tokenInput.name = '__RequestVerificationToken';
                        tokenInput.value = token;
                        form.appendChild(tokenInput);

                        document.body.appendChild(form);

                        // Show loading
                        Swal.fire({
                            title: 'Deleting...',
                            text: 'Please wait',
                            allowOutsideClick: false,
                            allowEscapeKey: false,
                            allowEnterKey: false,
                            showConfirmButton: false,
                            didOpen: () => {
                                Swal.showLoading();
                            }
                        });

                        form.submit();
                    }
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'An error occurred while checking the item. Please try again.',
                    confirmButtonColor: '#dc3545'
                });
            }
        }
    </script>
}